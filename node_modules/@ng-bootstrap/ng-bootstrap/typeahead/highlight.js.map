{"version":3,"file":"highlight.js","sourceRoot":"","sources":["../../src/typeahead/highlight.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,SAAS,EAAE,KAAK,EAAa,uBAAuB,EAAgB,MAAM,eAAe,CAAC;AAClG,OAAO,EAAC,YAAY,EAAE,QAAQ,EAAC,MAAM,cAAc,CAAC;;;8BAiBxB,eAAe;;IAIzC,kCAAW,GAAX,UAAY,OAAsB;QAChC,IAAM,SAAS,GAAG,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACxC,IAAM,QAAQ,GAAG,SAAS,CAAC,WAAW,EAAE,CAAC;QACzC,IAAM,MAAM,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,EAAE,CAAC;QACjD,IAAI,UAAU,GAAG,CAAC,CAAC;QAEnB,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YACtB,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,IAAI,MAAM,CAAC,MAAI,YAAY,CAAC,MAAM,CAAC,MAAG,CAAC,CAAC,CAAC,GAAG,CAAC,UAAC,IAAI;gBAC5E,IAAM,YAAY,GAAG,SAAS,CAAC,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;gBAC/D,UAAU,IAAI,IAAI,CAAC,MAAM,CAAC;gBAC1B,MAAM,CAAC,YAAY,CAAC;aACrB,CAAC,CAAC;SACJ;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,KAAK,GAAG,CAAC,SAAS,CAAC,CAAC;SAC1B;KACF;;gBAlCF,SAAS,SAAC;oBACT,QAAQ,EAAE,eAAe;oBACzB,eAAe,EAAE,uBAAuB,CAAC,MAAM;oBAC/C,QAAQ,EAAE,oEAAgE;wBACtE,yHAAmH;wBACnH,gBAAgB;;oBACpB,MAAM,EAAE,CAAC,6DAIR,CAAC;iBACH;;;;;mCAIE,KAAK;2BACL,KAAK;yBACL,KAAK;;uBApBR;;SAea,YAAY","sourcesContent":["import {Component, Input, OnChanges, ChangeDetectionStrategy, SimpleChanges} from '@angular/core';\nimport {regExpEscape, toString} from '../util/util';\n\n@Component({\n  selector: 'ngb-highlight',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: `<ng-template ngFor [ngForOf]=\"parts\" let-part let-isOdd=\"odd\">` +\n      `<span *ngIf=\"isOdd\" class=\"{{highlightClass}}\">{{part}}</span><ng-template [ngIf]=\"!isOdd\">{{part}}</ng-template>` +\n      `</ng-template>`,  // template needs to be formatted in a certain way so we don't add empty text nodes\n  styles: [`\n    .ngb-highlight {\n      font-weight: bold;\n    }\n  `]\n})\nexport class NgbHighlight implements OnChanges {\n  parts: string[];\n\n  @Input() highlightClass = 'ngb-highlight';\n  @Input() result: string;\n  @Input() term: string;\n\n  ngOnChanges(changes: SimpleChanges) {\n    const resultStr = toString(this.result);\n    const resultLC = resultStr.toLowerCase();\n    const termLC = toString(this.term).toLowerCase();\n    let currentIdx = 0;\n\n    if (termLC.length > 0) {\n      this.parts = resultLC.split(new RegExp(`(${regExpEscape(termLC)})`)).map((part) => {\n        const originalPart = resultStr.substr(currentIdx, part.length);\n        currentIdx += part.length;\n        return originalPart;\n      });\n    } else {\n      this.parts = [resultStr];\n    }\n  }\n}\n"]}