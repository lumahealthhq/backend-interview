{"version":3,"file":"dropdown.js","sourceRoot":"","sources":["../../src/dropdown/dropdown.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  forwardRef,\n  Inject,\n  Directive,\n  Input,\n  Output,\n  EventEmitter,\n  ElementRef,\n  ContentChild,\n  NgZone,\n  Renderer2,\n  OnInit\n} from '@angular/core';\nimport {NgbDropdownConfig} from './dropdown-config';\nimport {positionElements, PlacementArray, Placement} from '../util/positioning';\n\n/**\n */\n@Directive(\n    {selector: '[ngbDropdownMenu]', host: {'[class.dropdown-menu]': 'true', '[class.show]': 'dropdown.isOpen()'}})\nexport class NgbDropdownMenu {\n  placement: Placement = 'bottom';\n  isOpen = false;\n\n  constructor(\n      @Inject(forwardRef(() => NgbDropdown)) public dropdown, private _elementRef: ElementRef,\n      private _renderer: Renderer2) {}\n\n  isEventFrom($event) { return this._elementRef.nativeElement.contains($event.target); }\n\n  position(triggerEl, placement) {\n    this.applyPlacement(positionElements(triggerEl, this._elementRef.nativeElement, placement));\n  }\n\n  applyPlacement(_placement: Placement) {\n    // remove the current placement classes\n    this._renderer.removeClass(this._elementRef.nativeElement.parentNode, 'dropup');\n    this._renderer.removeClass(this._elementRef.nativeElement.parentNode, 'dropdown');\n    this.placement = _placement;\n    /**\n     * apply the new placement\n     * in case of top use up-arrow or down-arrow otherwise\n     */\n    if (_placement.search('^top') !== -1) {\n      this._renderer.addClass(this._elementRef.nativeElement.parentNode, 'dropup');\n    } else {\n      this._renderer.addClass(this._elementRef.nativeElement.parentNode, 'dropdown');\n    }\n  }\n}\n\n/**\n * Allows the dropdown to be toggled via click. This directive is optional.\n */\n@Directive({\n  selector: '[ngbDropdownToggle]',\n  host: {\n    'class': 'dropdown-toggle',\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'dropdown.isOpen()',\n    '(click)': 'toggleOpen()'\n  }\n})\nexport class NgbDropdownToggle {\n  anchorEl;\n\n  constructor(@Inject(forwardRef(() => NgbDropdown)) public dropdown, private _elementRef: ElementRef) {\n    this.anchorEl = _elementRef.nativeElement;\n  }\n\n  toggleOpen() { this.dropdown.toggle(); }\n\n  isEventFrom($event) { return this._elementRef.nativeElement.contains($event.target); }\n}\n\n/**\n * Transforms a node into a dropdown.\n */\n@Directive({\n  selector: '[ngbDropdown]',\n  exportAs: 'ngbDropdown',\n  host: {\n    '[class.show]': 'isOpen()',\n    '(keyup.esc)': 'closeFromOutsideEsc()',\n    '(document:click)': 'closeFromClick($event)'\n  }\n})\nexport class NgbDropdown implements OnInit {\n  private _zoneSubscription: any;\n\n  @ContentChild(NgbDropdownMenu) private _menu: NgbDropdownMenu;\n\n  @ContentChild(NgbDropdownToggle) private _toggle: NgbDropdownToggle;\n\n  /**\n   * Indicates that dropdown should be closed when selecting one of dropdown items (click) or pressing ESC.\n   * When it is true (default) dropdowns are automatically closed on both outside and inside (menu) clicks.\n   * When it is false dropdowns are never automatically closed.\n   * When it is 'outside' dropdowns are automatically closed on outside clicks but not on menu clicks.\n   * When it is 'inside' dropdowns are automatically on menu clicks but not on outside clicks.\n   */\n  @Input() autoClose: boolean | 'outside' | 'inside';\n\n  /**\n   *  Defines whether or not the dropdown-menu is open initially.\n   */\n  @Input('open') _open = false;\n\n  /**\n   * Placement of a popover accepts:\n   *    \"top\", \"top-left\", \"top-right\", \"bottom\", \"bottom-left\", \"bottom-right\",\n   *    \"left\", \"left-top\", \"left-bottom\", \"right\", \"right-top\", \"right-bottom\"\n   * and array of above values.\n   */\n  @Input() placement: PlacementArray;\n\n  /**\n   *  An event fired when the dropdown is opened or closed.\n   *  Event's payload equals whether dropdown is open.\n   */\n  @Output() openChange = new EventEmitter();\n\n  constructor(config: NgbDropdownConfig, ngZone: NgZone) {\n    this.placement = config.placement;\n    this.autoClose = config.autoClose;\n    this._zoneSubscription = ngZone.onStable.subscribe(() => { this._positionMenu(); });\n  }\n\n  ngOnInit() {\n    if (this._menu) {\n      this._menu.applyPlacement(Array.isArray(this.placement) ? (this.placement[0]) : this.placement as Placement);\n    }\n  }\n\n  /**\n   * Checks if the dropdown menu is open or not.\n   */\n  isOpen(): boolean { return this._open; }\n\n  /**\n   * Opens the dropdown menu of a given navbar or tabbed navigation.\n   */\n  open(): void {\n    if (!this._open) {\n      this._open = true;\n      this._positionMenu();\n      this.openChange.emit(true);\n    }\n  }\n\n  /**\n   * Closes the dropdown menu of a given navbar or tabbed navigation.\n   */\n  close(): void {\n    if (this._open) {\n      this._open = false;\n      this.openChange.emit(false);\n    }\n  }\n\n  /**\n   * Toggles the dropdown menu of a given navbar or tabbed navigation.\n   */\n  toggle(): void {\n    if (this.isOpen()) {\n      this.close();\n    } else {\n      this.open();\n    }\n  }\n\n  closeFromClick($event) {\n    if (this.autoClose && $event.button !== 2 && !this._isEventFromToggle($event)) {\n      if (this.autoClose === true) {\n        this.close();\n      } else if (this.autoClose === 'inside' && this._isEventFromMenu($event)) {\n        this.close();\n      } else if (this.autoClose === 'outside' && !this._isEventFromMenu($event)) {\n        this.close();\n      }\n    }\n  }\n\n  closeFromOutsideEsc() {\n    if (this.autoClose) {\n      this.close();\n    }\n  }\n\n  ngOnDestroy() { this._zoneSubscription.unsubscribe(); }\n\n  private _isEventFromToggle($event) { return this._toggle ? this._toggle.isEventFrom($event) : false; }\n\n  private _isEventFromMenu($event) { return this._menu ? this._menu.isEventFrom($event) : false; }\n\n  private _positionMenu() {\n    if (this.isOpen() && this._menu && this._toggle) {\n      this._menu.position(this._toggle.anchorEl, this.placement);\n    }\n  }\n}\n"]}