{"version":3,"sources":["../../src/datepicker/datepicker-input.ts"],"names":[],"mappings":"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","file":"datepicker-input.js","sourceRoot":"","sourcesContent":["import {\n  Directive,\n  Input,\n  ComponentRef,\n  ElementRef,\n  ViewContainerRef,\n  Renderer2,\n  ComponentFactoryResolver,\n  NgZone,\n  TemplateRef,\n  forwardRef,\n  EventEmitter,\n  Output,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges\n} from '@angular/core';\nimport {AbstractControl, ControlValueAccessor, Validator, NG_VALUE_ACCESSOR, NG_VALIDATORS} from '@angular/forms';\n\nimport {NgbDate} from './ngb-date';\nimport {NgbDatepicker, NgbDatepickerNavigateEvent} from './datepicker';\nimport {DayTemplateContext} from './datepicker-day-template-context';\nimport {NgbDateParserFormatter} from './ngb-date-parser-formatter';\n\nimport {positionElements, PlacementArray} from '../util/positioning';\nimport {NgbDateStruct} from './ngb-date-struct';\nimport {NgbCalendar} from './ngb-calendar';\nimport {NgbDatepickerService} from './datepicker-service';\n\nconst NGB_DATEPICKER_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => NgbInputDatepicker),\n  multi: true\n};\n\nconst NGB_DATEPICKER_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => NgbInputDatepicker),\n  multi: true\n};\n\n/**\n * A directive that makes it possible to have datepickers on input fields.\n * Manages integration with the input field itself (data entry) and ngModel (validation etc.).\n */\n\nexport class NgbInputDatepicker implements OnChanges,\n    OnDestroy, ControlValueAccessor, Validator {\n  private _cRef: ComponentRef<NgbDatepicker> = null;\n  private _model: NgbDate;\n  private _zoneSubscription: any;\n\n  /**\n   * Reference for the custom template for the day display\n   */\n   dayTemplate: TemplateRef<DayTemplateContext>;\n\n  /**\n   * Number of months to display\n   */\n   displayMonths: number;\n\n  /**\n  * First day of the week. With default calendar we use ISO 8601: 1=Mon ... 7=Sun\n   */\n   firstDayOfWeek: number;\n\n  /**\n   * Callback to mark a given date as disabled.\n   * 'Current' contains the month that will be displayed in the view\n   */\n   markDisabled: (date: NgbDateStruct, current: {year: number, month: number}) => boolean;\n\n  /**\n   * Min date for the navigation. If not provided will be 10 years before today or `startDate`\n   */\n   minDate: NgbDateStruct;\n\n  /**\n   * Max date for the navigation. If not provided will be 10 years from today or `startDate`\n   */\n   maxDate: NgbDateStruct;\n\n  /**\n   * Navigation type: `select` (default with select boxes for month and year), `arrows`\n   * (without select boxes, only navigation arrows) or `none` (no navigation at all)\n   */\n   navigation: 'select' | 'arrows' | 'none';\n\n  /**\n   * The way to display days that don't belong to current month: `visible` (default),\n   * `hidden` (not displayed) or `collapsed` (not displayed with empty space collapsed)\n   */\n   outsideDays: 'visible' | 'collapsed' | 'hidden';\n\n  /**\n      * Placement of a datepicker popup accepts:\n      *    \"top\", \"top-left\", \"top-right\", \"bottom\", \"bottom-left\", \"bottom-right\",\n      *    \"left\", \"left-top\", \"left-bottom\", \"right\", \"right-top\", \"right-bottom\"\n      * and array of above values.\n      */\n   placement: PlacementArray = 'bottom-left';\n\n  /**\n   * Whether to display days of the week\n   */\n   showWeekdays: boolean;\n\n  /**\n   * Whether to display week numbers\n   */\n   showWeekNumbers: boolean;\n\n  /**\n   * Date to open calendar with.\n   * With default calendar we use ISO 8601: 'month' is 1=Jan ... 12=Dec.\n   * If nothing or invalid date provided, calendar will open with current month.\n   * Use 'navigateTo(date)' as an alternative\n   */\n   startDate: {year: number, month: number};\n\n  /**\n   * An event fired when navigation happens and currently displayed month changes.\n   * See NgbDatepickerNavigateEvent for the payload info.\n   */\n   navigate = new EventEmitter<NgbDatepickerNavigateEvent>();\n\n  private _onChange = (_: any) => {};\n  private _onTouched = () => {};\n  private _validatorChange = () => {};\n\n\n  constructor(\n      private _parserFormatter: NgbDateParserFormatter, private _elRef: ElementRef, private _vcRef: ViewContainerRef,\n      private _renderer: Renderer2, private _cfr: ComponentFactoryResolver, ngZone: NgZone,\n      private _service: NgbDatepickerService, private _calendar: NgbCalendar) {\n    this._zoneSubscription = ngZone.onStable.subscribe(() => {\n      if (this._cRef) {\n        positionElements(this._elRef.nativeElement, this._cRef.location.nativeElement, this.placement);\n      }\n    });\n  }\n\n  registerOnChange(fn: (value: any) => any): void { this._onChange = fn; }\n\n  registerOnTouched(fn: () => any): void { this._onTouched = fn; }\n\n  registerOnValidatorChange(fn: () => void): void { this._validatorChange = fn; };\n\n  setDisabledState(isDisabled: boolean): void {\n    this._renderer.setProperty(this._elRef.nativeElement, 'disabled', isDisabled);\n    if (this.isOpen()) {\n      this._cRef.instance.setDisabledState(isDisabled);\n    }\n  }\n\n  validate(c: AbstractControl): {[key: string]: any} {\n    const value = c.value;\n\n    if (value === null || value === undefined) {\n      return null;\n    }\n\n    if (!this._calendar.isValid(value)) {\n      return {'ngbDate': {invalid: c.value}};\n    }\n\n    if (this.minDate && NgbDate.from(value).before(NgbDate.from(this.minDate))) {\n      return {'ngbDate': {requiredBefore: this.minDate}};\n    }\n\n    if (this.maxDate && NgbDate.from(value).after(NgbDate.from(this.maxDate))) {\n      return {'ngbDate': {requiredAfter: this.maxDate}};\n    }\n  }\n\n  writeValue(value) {\n    const ngbDate = value ? new NgbDate(value.year, value.month, value.day) : null;\n    this._model = this._calendar.isValid(value) ? ngbDate : null;\n    this._writeModelValue(this._model);\n  }\n\n  manualDateChange(value: string, updateView = false) {\n    this._model = this._service.toValidDate(this._parserFormatter.parse(value), null);\n    this._onChange(this._model ? this._model.toStruct() : (value === '' ? null : value));\n    if (updateView && this._model) {\n      this._writeModelValue(this._model);\n    }\n  }\n\n  isOpen() { return !!this._cRef; }\n\n  /**\n   * Opens the datepicker with the selected date indicated by the ngModel value.\n   */\n  open() {\n    if (!this.isOpen()) {\n      const cf = this._cfr.resolveComponentFactory(NgbDatepicker);\n      this._cRef = this._vcRef.createComponent(cf);\n\n      this._applyPopupStyling(this._cRef.location.nativeElement);\n      this._cRef.instance.writeValue(this._model);\n      this._applyDatepickerInputs(this._cRef.instance);\n      this._subscribeForDatepickerOutputs(this._cRef.instance);\n      this._cRef.instance.ngOnInit();\n\n      // date selection event handling\n      this._cRef.instance.registerOnChange((selectedDate) => {\n        this.writeValue(selectedDate);\n        this._onChange(selectedDate);\n        this.close();\n      });\n\n      // focus handling\n      this._cRef.instance.focus();\n    }\n  }\n\n  /**\n   * Closes the datepicker popup.\n   */\n  close() {\n    if (this.isOpen()) {\n      this._vcRef.remove(this._vcRef.indexOf(this._cRef.hostView));\n      this._cRef = null;\n    }\n  }\n\n  /**\n   * Toggles the datepicker popup (opens when closed and closes when opened).\n   */\n  toggle() {\n    if (this.isOpen()) {\n      this.close();\n    } else {\n      this.open();\n    }\n  }\n\n  /**\n   * Navigates current view to provided date.\n   * With default calendar we use ISO 8601: 'month' is 1=Jan ... 12=Dec.\n   * If nothing or invalid date provided calendar will open current month.\n   * Use 'startDate' input as an alternative\n   */\n  navigateTo(date?: {year: number, month: number}) {\n    if (this.isOpen()) {\n      this._cRef.instance.navigateTo(date);\n    }\n  }\n\n  onBlur() { this._onTouched(); }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['minDate'] || changes['maxDate']) {\n      this._validatorChange();\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._zoneSubscription.unsubscribe();\n  }\n\n  private _applyDatepickerInputs(datepickerInstance: NgbDatepicker): void {\n    ['dayTemplate', 'displayMonths', 'firstDayOfWeek', 'markDisabled', 'minDate', 'maxDate', 'navigation',\n     'outsideDays', 'showNavigation', 'showWeekdays', 'showWeekNumbers']\n        .forEach((optionName: string) => {\n          if (this[optionName] !== undefined) {\n            datepickerInstance[optionName] = this[optionName];\n          }\n        });\n    datepickerInstance.startDate = this.startDate || this._model;\n  }\n\n  private _applyPopupStyling(nativeElement: any) {\n    this._renderer.addClass(nativeElement, 'dropdown-menu');\n    this._renderer.setStyle(nativeElement, 'padding', '0');\n  }\n\n  private _subscribeForDatepickerOutputs(datepickerInstance: NgbDatepicker) {\n    datepickerInstance.navigate.subscribe(date => this.navigate.emit(date));\n  }\n\n  private _writeModelValue(model: NgbDate) {\n    this._renderer.setProperty(this._elRef.nativeElement, 'value', this._parserFormatter.format(model));\n    if (this.isOpen()) {\n      this._cRef.instance.writeValue(model);\n      this._onTouched();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'input[ngbDatepicker]',\n  exportAs: 'ngbDatepicker',\n  host: {\n    '(input)': 'manualDateChange($event.target.value)',\n    '(change)': 'manualDateChange($event.target.value, true)',\n    '(keyup.esc)': 'close()',\n    '(blur)': 'onBlur()'\n  },\n  providers: [NGB_DATEPICKER_VALUE_ACCESSOR, NGB_DATEPICKER_VALIDATOR, NgbDatepickerService]\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgbDateParserFormatter, },\n{type: ElementRef, },\n{type: ViewContainerRef, },\n{type: Renderer2, },\n{type: ComponentFactoryResolver, },\n{type: NgZone, },\n{type: NgbDatepickerService, },\n{type: NgbCalendar, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'dayTemplate': [{ type: Input },],\n'displayMonths': [{ type: Input },],\n'firstDayOfWeek': [{ type: Input },],\n'markDisabled': [{ type: Input },],\n'minDate': [{ type: Input },],\n'maxDate': [{ type: Input },],\n'navigation': [{ type: Input },],\n'outsideDays': [{ type: Input },],\n'placement': [{ type: Input },],\n'showWeekdays': [{ type: Input },],\n'showWeekNumbers': [{ type: Input },],\n'startDate': [{ type: Input },],\n'navigate': [{ type: Output },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}